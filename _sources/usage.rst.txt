
.. DO NOT EDIT THIS FILE BY HAND, EDIT conf.py FILE INSTEAD

Examples
========

Basic usage
-----------
Basic usage example showing how do create an ODS object, populate it, and then saving and loading the data on a file and on IMAS

.. code-block:: python

    import os
    from omas import *
    
    #set OMAS debugging topic
    os.environ['OMAS_DEBUG_TOPIC']='imas'
    
    # Instantiate new OMAS Data Structure (ODS)
    ods=omas()
    
    # 0D data
    ods['equilibrium']['time_slice'][0]['time']=1000.
    ods['equilibrium']['time_slice'][0]['global_quantities.ip']=1.E6
    # 1D data
    ods['equilibrium']['time_slice'][0]['profiles_1d.psi']=[1,2,3]
    # 2D data
    ods['equilibrium']['time_slice'][0]['profiles_2d'][0]['b_field_tor']=[[1,2,3],[4,5,6]]
    
    # Save to file
    save_omas(ods,'test.omas')
    # Load from file
    ods1=load_omas('test.omas')
    
    # Save to IMAS
    paths=save_omas_imas(ods, user='meneghini', tokamak='ITER',
                         imas_version='3.10.1', shot=133221, run=0, new=True)
    # Load from IMAS
    ods1=load_omas_imas(user='meneghini', tokamak='ITER',
                        imas_version='3.10.1', shot=133221, run=0, paths=paths)


Accessing data
--------------
This examples showcases the different ways that OMAS provides to access its data

.. code-block:: python

    import numpy
    from omas import *
    
    ods=omas()
    
    # access data as dictionary
    ods['equilibrium']['time_slice'][0]['time']=1000.
    print(ods['equilibrium']['time_slice'][0]['time'])
    
    # access data as string
    ods['equilibrium.time_slice.1.time']=2000.
    print(ods['equilibrium.time_slice.1.time'])
    
    # access data as string (square brackets for arrays of structures)
    ods['equilibrium.time_slice[2].time']=3000.
    print(ods['equilibrium.time_slice[2].time'])
    
    # access data with path list
    ods[['equilibrium','time_slice',3,'time']]=4000.
    print(ods[['equilibrium','time_slice',3,'time']])
    
    # access data with mix and match approach
    ods['equilibrium]']['time_slice.4.time']=5000.
    print(ods['equilibrium.time_slice]']['4.time'])
    
    # classic ways to access data across an array of structures
    data=[]
    for k in ods['equilibrium.time_slice'].keys():
        data.append(ods['equilibrium.time_slice'][k]['time'])
    print(numpy.array(data))
    
    # access data across an array of structures via data slicing
    print(ods['equilibrium.time_slice.:.time'])


Save and load OMAS data in different formats
--------------------------------------------
This example shows how OMAS can save/load data in different formats without loosing or altering information.

.. figure:: images/omas_through_simple.png
  :align: center
  :width: 50%
  :alt: omas save data through different file formats
  :target: _images/omas_through_simple.png

.. code-block:: python

    import os
    from omas import *
    
    #set OMAS debugging topic
    os.environ['OMAS_DEBUG_TOPIC']='*'
    
    # load some sample data
    ods_start = ods_sample()
    
    # save/load Python pickle
    filename = 'test.pkl'
    save_omas_pkl(ods_start, filename)
    ods = load_omas_pkl(filename)
    
    # save/load ASCII Json
    filename = 'test.json'
    save_omas_json(ods, filename)
    ods = load_omas_json(filename)
    
    # save/load NetCDF
    filename = 'test.nc'
    save_omas_nc(ods, filename)
    ods = load_omas_nc(filename)
    
    # remote save/load S3
    filename = 'test.s3'
    save_omas_s3(ods, filename)
    ods = load_omas_s3(filename)
    
    # save/load IMAS
    user = os.environ['USER']
    tokamak = 'ITER'
    imas_version = os.environ.get('IMAS_VERSION','3.10.1')
    shot = 1
    run = 0
    new = True
    paths = save_omas_imas(ods,  user, tokamak, imas_version, shot, run, new)
    ods_end = load_omas_imas(user, tokamak, imas_version, shot, run, paths)
    
    # check data
    check=different_ods(ods, ods1)
    if not check:
       print('OMAS data got saved and loaded correctly throughout')
    else:
       print(check)

Usage with OMFIT classes
------------------------
Some classes of the `OMFIT framework <http://gafusion.github.io/OMFIT-source/>`_ classes support OMAS.
For these classes the combination of OMFIT and OMAS facilitate saving/loading data to/from IMAS.
In this example this is carried out for an equilibrium file (g-file).

.. figure:: images/eq_omas_omfit.png
  :align: center
  :width: 75%
  :alt: OMFIT+OMAS facilitate save/load gEQDSK to/from IMAS
  :target: _images/eq_omas_omfit.png

.. code-block:: python

    from omfit.classes.omfit_eqdsk import OMFITeqdsk
    from omas import *
    import os
    
    #set OMAS debugging topic
    os.environ['OMAS_DEBUG_TOPIC']='imas'
    
    #read gEQDSK file in OMFIT
    eq=OMFITgeqdsk('133221.01000')
    
    #convert gEQDSK to OMAS data structure
    ods=eq.to_omas()
    
    # save OMAS data structure to IMAS
    user = os.environ['USER']
    tokamak = 'ITER'
    imas_version = os.environ.get('IMAS_VERSION','3.10.1')
    shot = 1
    run = 0
    new = True
    paths = save_omas_imas(ods, user, tokamak, imas_version,
                           shot, run, new)
    
    # load IMAS to OMAS data structure
    ods1 = load_omas_imas(user, tokamak, imas_version, shot,
                          run, paths)
    
    #read from OMAS data structure
    eq1=OMFITgeqdsk('133221.02000').from_omas(ods1)
    
    #save gEQDSK file
    eq1.deploy()


